[{"/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/App.vue":"1","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/components/layouts/MainLayout.vue":"2","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/main.ts":"3","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/router/index.ts":"4","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/routes.ts":"5","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/shims-vue.d.ts":"6","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/stores/todo.ts":"7","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/views/CompletedTodos.vue":"8","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/views/Home.vue":"9","/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/vite.config.ts":"10"},{"size":183,"mtime":1740557299542},{"size":977,"mtime":1740557299542},{"size":391,"mtime":1740557299543},{"size":426,"mtime":1740557299543},{"size":320,"mtime":1740557299543},{"size":147,"mtime":1740557299543,"results":"11","hashOfConfig":"12"},{"size":2952,"mtime":1740557299544,"results":"13","hashOfConfig":"12"},{"size":1157,"mtime":1740557299544},{"size":2643,"mtime":1740557299544},{"size":283,"mtime":1740557299545},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nuf7cl",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/shims-vue.d.ts",["20","21","22"],[],"/Users/liulei/WebstormProjects/cursor-vue3-ts-tailwind-starter/src/stores/todo.ts",[],[],{"ruleId":"23","severity":2,"message":"24","line":3,"column":36,"nodeType":"25","messageId":"26","endLine":3,"endColumn":38,"suggestions":"27"},{"ruleId":"23","severity":2,"message":"24","line":3,"column":40,"nodeType":"25","messageId":"26","endLine":3,"endColumn":42,"suggestions":"28"},{"ruleId":"29","severity":1,"message":"30","line":3,"column":44,"nodeType":"31","messageId":"32","endLine":3,"endColumn":47,"suggestions":"33"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","TSTypeLiteral","bannedTypeMessage",["34","35","36","37"],["38","39","40","41"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["42","43"],{"messageId":"44","data":"45","fix":"46","desc":"47"},{"messageId":"44","data":"48","fix":"49","desc":"50"},{"messageId":"44","data":"51","fix":"52","desc":"53"},{"messageId":"44","data":"54","fix":"55","desc":"56"},{"messageId":"44","data":"57","fix":"58","desc":"47"},{"messageId":"44","data":"59","fix":"60","desc":"50"},{"messageId":"44","data":"61","fix":"62","desc":"53"},{"messageId":"44","data":"63","fix":"64","desc":"56"},{"messageId":"65","fix":"66","desc":"67"},{"messageId":"68","fix":"69","desc":"70"},"bannedTypeReplacement",{"name":"71","replacement":"72"},{"range":"73","text":"72"},"Replace `{}` with `object`.",{"name":"71","replacement":"74"},{"range":"75","text":"74"},"Replace `{}` with `unknown`.",{"name":"71","replacement":"76"},{"range":"77","text":"76"},"Replace `{}` with `Record<string, never>`.",{"name":"71","replacement":"78"},{"range":"79","text":"78"},"Replace `{}` with `NonNullable<unknown>`.",{"name":"71","replacement":"72"},{"range":"80","text":"72"},{"name":"71","replacement":"74"},{"range":"81","text":"74"},{"name":"71","replacement":"76"},{"range":"82","text":"76"},{"name":"71","replacement":"78"},{"range":"83","text":"78"},"suggestUnknown",{"range":"84","text":"74"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"85","text":"86"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","{}","object",[105,107],"unknown",[105,107],"Record<string, never>",[105,107],"NonNullable<unknown>",[105,107],[109,111],[109,111],[109,111],[109,111],[113,116],[113,116],"never"]